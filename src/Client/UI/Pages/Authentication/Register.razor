@page "/authentication/register"

@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

@inject IStringLocalizer<Register> loc;

<WebPageTitle Value="@loc["RegisterLabel"]"></WebPageTitle>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">@loc["Create account"]</h4>

    <label for="inputUsername" class="sr-only">@loc["User Name"]</label>
    <InputText id="inputUsername" class="form-control" placeholder="@loc["User Name"]" autofocus @bind-Value="@registerParameters.UserName" />
    <ValidationMessage For="@(() => registerParameters.UserName)" />

    <label for="inputPassword" class="sr-only">@loc["Password"]</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="@loc["Password"]" @bind-Value="@registerParameters.Password" />
    <ValidationMessage For="@(() => registerParameters.Password)" />

    <label for="inputPasswordConfirm" class="sr-only">@loc["Password Confirmation"]</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="@loc["Password Confirmation"]" @bind-Value="@registerParameters.PasswordConfirm" />
    <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">@loc["Create account"]</button>

    @if (!String.IsNullOrEmpty(@error))
    {
        <label class="text-danger">@error</label>
    }
    <NavLink href="/authentication/login">
        <h6 class="font-weight-normal text-center">@loc["Already have an account?"]</h6>
    </NavLink>
</EditForm>

@functions{

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();

    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.RegisterAsync(registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}

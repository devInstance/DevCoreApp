@page "/authentication/forgot-password"

@inject IStringLocalizer<ForgotPassword> loc;

@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

@if (!showConfirmation)
{
    <PageTitle Value="@loc["Forgot Password?"]"></PageTitle>
    @if (!showProgress)
    {
        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="forgotParameters">
            <DataAnnotationsValidator />
            
            <h4 class="font-weight-normal text-center">@loc["Forgot Password?"]</h4>
            
            <InputText id="inputEmail" class="form-control" @bind-Value="forgotParameters.Email" autofocus placeholder="@loc["Email"]" />
            <ValidationMessage For="@(() => forgotParameters.Email)" />
            <br />
            <button class="btn btn-lg btn-primary btn-block" type="submit">@loc["Submit"]</button>

            @if (!String.IsNullOrEmpty(@error))
            {
                <label class="text-danger">@error</label>
            }
        </EditForm>
    }
    else
    {
        <div class="message-card-container">
            <div class="row">
                <div class="col">
                    <h2>@loc["Sending request"]</h2>
                    <PageProgress></PageProgress>
                </div>
            </div>
        </div>
    }
}
else
{
    <PageTitle Value="@loc["Request has been sent"]"></PageTitle>
    <div class="message-card-container">
        <div class="row">
            <div class="col">
                <h2 class="modal-title">@loc["Request has been sent"]</h2>
                <p>@loc["Request has been sent+"]</p>
                <div class="modal-footer">
                    <NavLink href="/authentication/login" class="btn btn-lg btn-primary btn-block">
                        <h6 class="font-weight-normal text-center">@loc["Login"]</h6>
                    </NavLink>
                </div>
            </div>
        </div>
    </div>
}

@code {
    ForgotPasswordParameters forgotParameters { get; set; } = new ForgotPasswordParameters();

    string error { get; set; }

    bool showConfirmation = false;
    bool showProgress = false;

    async Task OnSubmit()
    {
        error = null;
        try
        {
            showProgress = true;
            StateHasChanged();
            await authStateProvider.ForgotPasswordAsync(forgotParameters);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        showProgress = false;
        showConfirmation = true;

        StateHasChanged();
    }
}
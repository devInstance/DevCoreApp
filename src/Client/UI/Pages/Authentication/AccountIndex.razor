@page "/profile"

@inject IStringLocalizer<AccountIndex> loc

<PageTitle Value="@loc["Profile"]"></PageTitle>
<div class="row mb-3">
    <div class="col">
        <h2>@loc["Profile"]</h2>
        @if (Item != null)
        {
            if (!IsEditing)
            {
                <table class="table">
                    <tr>
                        <td>@loc["Name:"]</td>
                        <td>@Item.Name</td>
                    </tr>
                    <tr>
                        <td>@loc["Email:"]</td>
                        <td>@Item.Email</td>
                    </tr>
                    <tr>
                        <td class="text-muted">@loc["Member since:"]</td>
                        <td class="text-muted">@Item.CreateDate</td>
                    </tr>
                </table>
                <button class="btn btn-outline-primary" @onclick="@(() => StartEditing())">
                    <i class="oi bi-pencil" aria-hidden="true"></i><span>@loc["Edit"]</span>
                </button>
            }
            else
            {
                <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="Item">
                    <label for="inputUsername" class="sr-only">@loc["Name:"]</label>
                    <InputText id="inputUsername" class="form-control" @bind-Value="Item.Name" autofocus placeholder="Username" />
                    <label for="inputEmail" class="sr-only">@loc["Email:"]</label>
                    <InputText id="inputEmail" class="form-control mb-3" @bind-Value="Item.Email" autofocus placeholder="Username" />
                    <button class="btn btn-primary btn-block" type="submit">@loc["Update"]</button>
                    <button class="btn btn-outline-primary" @onclick="@(() => CancelEditing())">@loc["Cancel"]</button>
                </EditForm>
            }
        }
        else
        {
            <PageProgress></PageProgress>
        }
    </div>
</div>
@if (!IsEditing)
{
<div class="row">
    <div class="col">
        <h5>@loc["Delete Account"]</h5>
        <p class="text-danger">@loc["Warning"]</p>
        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#addDeleteModal">
            <i class="oi bi-trash" aria-hidden="true"></i><span>@loc["Delete"]</span>
        </button>
    </div>
</div>
<div class="modal fade" id="addDeleteModal" tabindex="-1" aria-labelledby="addDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProjectModalLabel">@loc["Are you sure?"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@loc["Close"]"></button>
            </div>
            <div class="modal-body">
                <p class="text-danger">@loc["Warning"]</p>
                <p>@loc["Are you sure+"]</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@loc["Cancel"]</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="OnDelete">@loc["Delete"]</button>
            </div>
        </div>
    </div>
</div>

}

@inject IScopeManager ScopeManager;
@inject AccountService Service;
@inject AuthorizationService AuthorizationServ;
@inject NavigationManager NavigationManager;

@implements IDisposable

@code {

    private UserProfileItem Item { get; set; }

    private IScopeLog log;

    private bool IsEditing { get; set; } = false;

    string error { get; set; }

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        using (var l = log.TraceScope())
        {
            Item = await Service.GetAccountAsync();
        }
    }

    public void Dispose()
    {
        using (var scope = log.TraceScope())
        {
        }
    }

    public void StartEditing()
    {
        IsEditing = true;
        StateHasChanged();
    }

    public void CancelEditing()
    {
        IsEditing = false;
        StateHasChanged();
    }

    public async Task OnSubmit()
    {
        error = null;
        try
        {
            await Service.UpdateUserProfileAsync(Item);
            IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async void OnDelete(object value)
    {
        await AuthorizationServ.DeleteAsync();
        NavigationManager.NavigateTo("/authentication/login");
    }
}

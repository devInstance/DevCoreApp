@page "/authentication/reset-password"

@using Microsoft.AspNetCore.WebUtilities

@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<PageTitle Value="Reset Password"></PageTitle>

@switch (state)
{
    case ThisViewState.Initial:
        @if (!showProgress)
        {
            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPasswordParameters">
                <DataAnnotationsValidator />
                <h4 class="font-weight-normal text-center">New password</h4>

                <label for="inputPasswordConfirm" class="sr-only">New Password</label>
                <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="New Password" @bind-Value="@resetPasswordParameters.Password" />
                <ValidationMessage For="@(() => resetPasswordParameters.Password)" />

                <label for="inputPasswordConfirm" class="sr-only">New Password Confirmation</label>
                <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="New Password Confirmation" @bind-Value="@resetPasswordParameters.ConfirmPassword" />
                <ValidationMessage For="@(() => resetPasswordParameters.ConfirmPassword)" />

                <button class="btn btn-lg btn-primary btn-block" type="submit">Change</button>

                @if (!String.IsNullOrEmpty(@error))
                {
                    <label class="text-danger">@error</label>
                }
                <NavLink href="register">
                    <h6 class="font-weight-normal text-center">Create account</h6>
                </NavLink>

            </EditForm>
        }
        else
        {
            <div class="message-card-container">
                <div class="row">
                    <div class="col">
                        <h2>Sending request ... Please wait</h2>
                        <PageProgress></PageProgress>
                    </div>
                </div>
            </div>
        }
        break;
    case ThisViewState.Success:
        <PageTitle Value="Password has been changed"></PageTitle>
        <div class="message-card-container">
            <div class="row">
                <div class="col">
                    <h2 class="modal-title">Password has been changed</h2>
                    <p>Your password has been changed. Please login with new password.</p>
                    <div class="modal-footer">
                        <NavLink href="/authentication/login" class="btn btn-lg btn-primary btn-block">
                            <h6 class="font-weight-normal text-center">Login</h6>
                        </NavLink>
                    </div>
                </div>
            </div>
        </div>
        break;
    case ThisViewState.Failed:
        <PageTitle Value="Request failed"></PageTitle>
        <div class="message-card-container">
            <div class="row">
                <div class="col">
                    <h2 class="modal-title">Request failed</h2>
                    @if (!String.IsNullOrEmpty(@error))
                    {
                        <label class="text-danger">@error</label>
                    }
                    <div class="modal-footer">
                        <NavLink href="/authentication/login" class="btn btn-lg btn-primary btn-block">
                            <h6 class="font-weight-normal text-center">Login</h6>
                        </NavLink>
                    </div>
                </div>
            </div>
        </div>
        break;
}


@code {
    ResetPasswordModel resetPasswordParameters { get; set; } = new ResetPasswordModel();

    enum ThisViewState
    {
        Initial,
        Success,
        Failed
    };

    ThisViewState state = ThisViewState.Initial;

    bool showProgress = false;

    string error { get; set; }

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var token))
        {
            resetPasswordParameters.Token = token;
        }
        if (query.TryGetValue("email", out var email))
        {
            resetPasswordParameters.Email = email;
        }
    }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            showProgress = true;
            StateHasChanged();

            await authStateProvider.ResetPasswordAsync(resetPasswordParameters);
            state = ThisViewState.Success;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            state = ThisViewState.Failed;
        }

        StateHasChanged();
    }
}
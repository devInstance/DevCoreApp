<nav class="top-row navbar navbar-expand navbar-light navbar-bg bg-light">
    <div class="container-fluid">
        <div class="float-start">
                <button class="btn btn-default" @onclick="@(() => ShrinkSidebar())">
                    <span class="navbar-toggler-icon"></span>
                </button>
        </div>
        <div class="dropdown float-end px-2">
          <a href="#" class="d-block link-dark text-decoration-none dropdown-toggle"
                        id="dropdownUser1"
                        data-bs-toggle="dropdown"
                        aria-expanded="true">
               <i class="oi bi-person-circle" aria-hidden="true" style="font-size:2rem;"></i>
          </a>
          <ul class="dropdown-menu text-small" 
                aria-labelledby="dropdownUser1"
                style="position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate(-112px, 34px);"
                data-popper-placement="bottom-end">
            <li>
                <NavLink class="dropdown-item" href="account">
                    <i class="oi bi-person" aria-hidden="true"></i><span>Profile</span>
                </NavLink>
            </li>
            <li>
                <NavLink class="dropdown-item" href="settings">
                    <i class="oi bi-gear" aria-hidden="true"></i><span>Settings</span>
                </NavLink>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <NavLink class="dropdown-item" href="#" @onclick="@Logout">Sign out</NavLink>
            </li>
          </ul>
        </div>
    </div>
</nav>

@inject ToolbarService ToolbarServ;
@inject IScopeManager ScopeManager;
@inject IdentityAuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

@code {

    private IScopeLog log;

    protected async override Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        using (var l = log.TraceScope())
        {
            ToolbarServ.ToolbarHasChanged += OnChange;
            OnChange(null);
        }
    }

    private void OnChange(object value)
    {
        using (var l = log.TraceScope())
        {
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await authStateProvider.LogoutAsync();
        navigationManager.NavigateTo("/authentication/login");
    }

    private void ShrinkSidebar()
    {
        ToolbarServ.ToggleSidebar();
    }
}

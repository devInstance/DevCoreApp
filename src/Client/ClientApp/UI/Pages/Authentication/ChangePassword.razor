@page "/authentication/change-password"

@inject IStringLocalizer<ChangePassword> loc;

<WebPageTitle Value="@loc["Change Password"]"></WebPageTitle>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">@loc["Change Password"]</h4>

    <label for="inputPassword" class="sr-only">@loc["Current Password"]</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="@loc["Password"]" @bind-Value="@registerParameters.OldPassword" />
    <ValidationMessage For="@(() => registerParameters.OldPassword)" />

    <label for="inputPasswordConfirm" class="sr-only">@loc["New Password"]</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="@loc["Password Confirmation"]" @bind-Value="@registerParameters.NewPassword" />
    <ValidationMessage For="@(() => registerParameters.NewPassword)" />

    <label for="inputPasswordConfirm" class="sr-only">@loc["New Password Confirmation"]</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="@loc["Password Confirmation"]" @bind-Value="@registerParameters.NewPasswordConfirm" />
    <ValidationMessage For="@(() => registerParameters.NewPasswordConfirm)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">@loc["Change"]</button>

    @if (!String.IsNullOrEmpty(@error))
    {
        <label class="text-danger">@error</label>
    }
</EditForm>
@inject IAuthorizationService AuthorizationServ;
@inject NavigationManager navigationManager

@code {
    ChangePasswordParameters registerParameters { get; set; } = new ChangePasswordParameters();

    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await AuthorizationServ.ChangePasswordAsync(registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            StateHasChanged();
        }
    }

}

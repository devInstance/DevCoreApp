@using DevInstance.DevCoreApp.Client.Utils;
@if (PagesCount > 1)
{
    <nav aria-label="Pages">
        <ul class="pagination">
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Previous" @onclick:preventDefault @onclick="@(() => ChangePage(SelectedPage - 1))">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @foreach (var p in PageRange)
            {
                <li class="@(p == SelectedPage ? "page-item active" : "page-item")">
                    <a class="page-link" href="#" @onclick:preventDefault @onclick="@(() => ChangePage(p))">@((p + 1).ToString())</a>
                </li>
            }
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Next" @onclick:preventDefault @onclick="@(() => ChangePage(SelectedPage + 1))">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int PagesCount { get; set; }

    [Parameter]
    public int SelectedPage { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    int MaxItems = 15;

    private IEnumerable<int> PageRange
    {
        get
        {
            return DataPageUtils.GetPageRange(SelectedPage, PagesCount, MaxItems);
        }
    }
    private void ChangePage(int newValue)
    {
        OnPageChanged.InvokeAsync(newValue);
    }
}
